First you'll need to convert the 'month' column from a string into a real JavaScript datetime. Look at "Chart 1" from Homework #6 for tips!



























You should definitely cute and paste from Homework 6 Chart #1, but as another tip: You'll have a part that looks like this:

  var parseTime = d3.timeParse("??????????")

but with something useful instead of ?????. And you'll have another piece when using d3.defer that looks like

  function(d) {
    d.datetime = parseTime(d.month)
    return d
  }

MAKE SURE YOU RETURN d OR IT WON'T WORK.



















You're going to have a different time parser, though. The old one was...

  var parseTime = d3.timeParse("%Y-%m-%d")

Because it parses time like

  2017-06-30

But this dataset is different! Your dates look like

  July-17
  August-17
  March-17

Luckily http://strftime.org/ can help


















So if we look at "August-17," it's the the FULL LENGTH NAME of the month, then a HYPHEN, then the SHORT VERSION OF THE YEAR (no century)
























Add your axes before you do anything else!
















When you're adding your axes, you'll want to use d3.tickFormat with a date format string. For example, the one from homework #6 is:

    var xAxis = d3.axisBottom(xPositionScale).tickFormat(d3.timeFormat("%m/%d/%y"));




















You want 10 lines, but have a lot more than 10 datapoints. Sounds like a job for d3.nest!
















When binding data, Chart #1 from last time is NOT what you should refer to. That one only has one line!!! we now want a lot of lines based on grouped data!
























You shouldn't be doing .attr("d", line). Each line is different!

















And it's nested, right? line wants a list of datapoints. Are you giving it a list of datapoints? If you're having trouble, console.log(d) to see what your d looks like.


















You want the same number of circles/text elements as you do lines.


















Circles and text need to be positioned. They should be positioned according to one of the datapoints, the one for the most recent month.















remember cx is going to be your datetime and cy is going to be your housing prices





















to get the last element of a list,

  listname[listname.length - 1] 

but maybe that isn't what you want???















colorbrewer2.org is good for a list of colors. Click 'qualitative' to get categorical colors. the obvious-but-hidden EXPORT tab is also useful for getting a list out!















Using d.region isn't going to work for your coloring. Why not?
















To get text to show up in a text element, use 

  .text(function(d) { 
    ....
  })












dx and dy are nice ways to offset your text without math!











How do you put that rectangle there to highlight winter??? Well, start by positioning it at the x position for December 2016. Use the scale to do that! But... xPositionScale("December-16") isn't going to work. Why not?















rectangles get an x, y, width, and height. Can't figure out the width yet? set the height and y and just give it the width of 10 or something.












To get the width, it's kind of tricky. It goes between the december 2016 and february 2017, right? Maybe some subtraction would be useful.














to make the rectangle go 'behind' the lines, use .lower()



