
First do the dots, then build the line!









I created a variable like this:
var parseTime = d3.timeParse("%Y-%m-%d")
you won't ever have to use it (I wrote the code that does), but now you know how to parse time! String format comes from strftime.org.













Go look at d3.queue()! We're doing a cool thing where we run a function to clean up every single row. We take the d.Date column (a string) and convert it into a Javascript datetime object. We save it back into the datapoint, calling it d.datetime.













Set up your scales WITHOUT a domain first - you don't know the min/max of your stock price or the min/max of your date until after you've read in your data. After you've read in your data, then you can set the domain












yPositionScale.domain([min, max])
vs
yPositionScale.domain(min, max)
...which one is the one that works?










You can aaaaallllways use the same d3.line() thingie as long as you change the column names.












d3.min and d3.max will get the min or max of a list of numbers or times, but you need to create that list! You can't just do d3.max(datapoints)















You're looking for d3.map, we used it on Wednesday!














Use console.log to inspect variables that are giving you weird or unexpected results


















Getting odd results? Remember how d3 reads everything in as a string? When getting the max for the y axis you might need to use a trick we did in class on Wednesday. And by "might" I mean "you will definitely need to."















How do you convert a string to a number in JS? Don't use parseInt or parseFloat, there's a special symbol!















many dots = one for EACH data point, so selectAll + .data

one line = one for ALL data points, so .append + .datum













The svg element to draw a line is NOT called line


















is it filled in and terrible looking? Remember there are two ways to colors things in: fill and stroke!















Your x axis doesn't know how time works! But you can make it know how time works:
var xAxis = d3.axisBottom(xPositionScale).tickFormat(d3.timeFormat("%m/%d/%y"));











Make sure your scales are going in the right direction!



